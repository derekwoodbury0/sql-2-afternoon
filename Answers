PRACTICE JOINS


1. 
  SELECT * FROM invoice i
  JOIN invoice_line il ON il.invoice_id = i.invoice_id
  WHERE il.unit_price > 0.99;

2.
  SELECT i.invoice_date, c.first_name, c.last_name, i.total
  FROM invoice i
  JOIN customer c ON i.customer_id = c.customer_id;

3.
  SELECT c.first_name, c.last_name, e.first_name, e.last_name
  FROM customer c
  JOIN employee e ON c.support_rep_id = e.employee_id;

4.
  SELECT a.title, ar.name FROM album a
  JOIN artist ar ON a.artist_id = ar.artist_id;

5.
  SELECT pt.track_id FROM playlist_track pt
  JOIN playlist p ON pt.playlist_id = p.playlist_id
  WHERE p.name = 'Music';

6.
  SELECT t.name FROM track t
  JOIN playlist_track pt ON pt.track_id = t.track_id
  WHERE pt.playlist_id = 5;

7. 
  SELECT t.name, p.name FROM track t
  JOIN playlist_track pt ON t.track_id = pt.track_id
  JOIN playlist p ON pt.playlist_id = p.playlist_id;

8. 
  SELECT t.name, a.title FROM track t
  JOIN album a ON t.album_id = a.album_id
  JOIN genre g ON g.genre_id = t.genre_id
  WHERE g.name = 'Alternative & Punk';


PRACTICE NESTED QUERIES


1.
  SELECT * FROM invoice
  WHERE invoice_id IN (
    SELECT invoice_id FROM invoice_line
    WHERE unit_price > 0.99
    )
    
2.
  SELECT * FROM playlist_track
  WHERE playlist_id IN (
    SELECT playlist_id FROM playlist
    WHERE name = 'Music');
    
3.
  SELECT name FROM track
  WHERE track_id IN (
    SELECT track_id FROM playlist_track
    WHERE playlist_id = 5);
    
4.
  SELECT name FROM track
  WHERE genre_id IN (
    SELECT genre_id FROM genre
    WHERE name = 'Comedy');
    
5.
  SELECT * FROM track
  WHERE album_id IN (
    SELECT album_id FROM album
    WHERE name = 'Fireball');
    
6.
  SELECT * FROM track
  WHERE album_id IN (
    SELECT album_id FROM album
    WHERE artist_id IN (
      SELECT artist_id FROM artist
      WHERE name = 'Queen'));
      
  
PRACTICE UPDATING ROWS


1.
  UPDATE customer
  SET fax = null
  WHERE fax IS NOT null;
  
2.
  UPDATE customer
  SET company = 'Self'
  WHERE company IS null;
  
3.
  UPDATE customer
  SET last_name = 'Thompson'
  WHERE first_name = 'Julia'
  AND last_name = 'Barnett';
  
4.
  UPDATE customer
  SET support_rep_id = 4
  WHERE email = 'luisrojas@yahoo.cl';
  
5.
  UPDATE track
  SET composer = 'The darkness around us'
  WHERE genre_id IN (
    SELECT genre_id FROM genre
    WHERE name = 'Metal')
  AND composer IS null;
  

GROUP BY


1.
  SELECT g.name, COUNT(*)
  FROM track t
  JOIN genre g ON t.genre_id = g.genre_id
  GROUP BY g.name;
  
2.
  SELECT COUNT(*), g.name FROM track t
  JOIN genre g ON g.genre_id = t.genre_id
  WHERE g.name = 'Pop' OR g.name = 'Rock'
  GROUP BY g.name;
  
3.
  SELECT ar.name, COUNT(*) FROM album al
  JOIN artist ar ON ar.artist_id = al.artist_id
  GROUP BY ar.name;
  
  
USE DISTINCT


1.
  SELECT DISTINCT composer
  FROM track;
  
2.
  SELECT DISTINCT billing_postal_code
  FROM invoice;
  
3.
  SELECT DISTINCT company
  FROM customer;
  
  
DELETE ROWS


1.
  DELETE 
  FROM practice_delete 
  WHERE type = 'bronze';
  
2.
  DELETE 
  FROM practice_delete 
  WHERE type = 'silver';
  
3.
  DELETE 
  FROM practice_delete 
  WHERE value = 150;
  
  
ECOMMERCE SIMULATION


1.
  CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    name varchar,
    email varchar)
    
2.
  CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    name VARCHAR,
    price DECIMAL
  );
  
3.
  CREATE TABLE orders (
    product_id INT REFERENCES products(product_id)  
  );
  
4.
  INSERT INTO users (name, email)
	VALUES ('Derek', '134@email.com'),
  	('Alexis', 'alexis@email.com'),
  	('Devin', 'devin@email.com');
    
5.
  INSERT INTO products (name, price)
    VALUES ('hat', 19.99),
      ('shirt', 23),
      ('glasses', 145.55)
      
6.
  INSERT INTO orders (product_id)
  VALUES (1), (2), (3)
  
7.
  SELECT p.name FROM orders o
  JOIN products p ON p.product_id = o.product_id
  WHERE p.product_id = 1;
  
8.
  SELECT * FROM orders
  
9.
  SELECT SUM(p.price) FROM orders o
  JOIN products p ON p.product_id = o.product_id
  WHERE p.product_id = 1;
  
10.
  ALTER TABLE orders
  ADD COLUMN order_id SERIAL PRIMARY KEY

11.
  ALTER TABLE users
  ADD COLUMN order_id INT REFERENCES orders(order_id);

